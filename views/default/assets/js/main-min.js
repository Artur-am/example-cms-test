function Route(t,e){t&&e(t)}function getXmlHttpRequest(){if(window.XMLHttpRequest)try{return new XMLHttpRequest}catch(t){}else if(window.ActiveXObject){try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){}try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}return null}function Сloud(t){let e=t.getElementsByClassName("cloud-wrapper")[0],n=e.getElementsByClassName("cloud-list"),o=0,i=0,l=0;function s(t,e){return~~(t+Math.random()*(e-t))}function r(){let t=0,e=[["rgb(239, 154, 154)","rgb(183, 28, 28)"],["rgb(244, 143, 177)","rgb(136, 14, 79)"],["rgb(206, 147, 216)","rgb(74, 20, 140)"],["rgb(179, 157, 219)","rgb(49, 27, 146)"],["rgb(159, 168, 218)","rgb(26, 35, 126)"],["rgb(144, 202, 249)","rgb(13, 71, 161)"],["rgb(129, 212, 250)","rgb(1, 87, 155)"],["rgb(128, 222, 234)","rgb(0, 96, 100)"],["rgb(128, 203, 196)","rgb(0, 77, 64)"],["rgb(165, 214, 167)","rgb(27, 94, 32)"],["rgb(197, 225, 165)","rgb(51, 105, 30)"],["rgb(230, 238, 156)","rgb(130, 119, 23)"],["rgb(255, 245, 157)","rgb(245, 127, 23)"],["rgb(255, 224, 130)","rgb(255, 111, 0)"],["rgb(255, 204, 128)","rgb(230, 81, 0)"],["rgb(255, 171, 145)","rgb(191, 54, 12)"],["rgb(188, 170, 164)","rgb(62, 39, 35)"],["rgb(238, 238, 238)","rgb(33, 33, 33)"],["rgb(176, 190, 197)","rgb(38, 50, 56)"]];this.setColorItem=function(n){color=e[Math.floor(Math.random()*e.length)],t=o-n.dataset.count,n.style.cssText=`\n                background-image: linear-gradient(to right, ${color[0]} 0%, ${color[1]} ${100-t}%);\n                font-size: ${2-("."+t)}em;\n            `}}function a(){this.getSize=function(t){t.style.display="inline-block",i+=t.clientWidth/4,l+=t.clientHeight/4,t.style.display=""},this.setWrapper=function(){e.style.cssText=`\n                width: ${i}px;\n                height: ${l}px;\n                transform: translateY(-1px) scale(1);\n                transition: transform 3s ease;\n            `},this.positionItem=function(t){x=s(0,100),y=s(0,100),t.style.cssText+=`\n                display: table;\n                position: absolute;\n                top: ${y}%;\n                left: ${x}%;\n                transform: translate(-${y}%, -${x}%);\n            `}}function c(){function n(t){let o="";if(o="y"in t&&"x"in t?`translate(${t.y}px, ${t.x}px)`:"y"in t?`translateY(${t.y}px)`:`translateX(${t.x}px)`,s(0,2)&&(o+=" scale("+(1-("."+s(1,4)))+")"),o==e.style.transform)return n({y:y,x:x});e.style.transform=o}function o(){let t=e.style.transform,n=1;return t&&(t=t.split("scale")).length>1&&(n=+t[1].replace(/[(-)]+/g,"")),[t[0],n]}this.position=((t=null)=>{let e=function(t){return~~(t/10*s(0,11))},o=~~(l/2-e(l/2));if(s(0,2)){n({y:"-"+o,x:"-"+~~(i/2-e(i/2))})}else n({y:"-"+o})}),this.transition=(t=>{this.eventKey in r&&r[this.eventKey]()}),this.scroll=(o=>{let i=(n,o="scroll-bottom",i=1)=>{let s=e.getBoundingClientRect()[n]-t.getBoundingClientRect()[n];return i>0?s+=31:s-=31,i*s>l/6&&(this.eventKey=o),s},s={top:()=>({y:i("top")}),right:()=>({x:i("left","scrollLeft")}),bottom:()=>({y:i("top","scrollTop",-1)}),left:()=>({x:i("left","scrollRight",-1)})};o in s&&n(s[o]())}),this.zoomMax=function(){let t=o();e.style.transform=t[0]+"scale("+(t[1]+.1)+")"},this.zoomMin=function(){let t=o();e.style.transform=t[0]+"scale("+(t[1]-.1)+")"};let r={position:this.position,scrollTop:()=>{this.scroll("top")},scrollRight:()=>{this.scroll("right")},scrollBottom:()=>{this.scroll("bottom")},scrollLeft:()=>{this.scroll("left")},zoomMax:this.zoomMax,zoomMin:this.zoomMin};this.eventKey="position"}!function(){function i(t){for(let e of n)t(e)}i(function(t){t.dataset.count>o&&(o=t.dataset.count)});let l=new r,s=new a,u=new c;i(function(t){l.setColorItem(t),s.getSize(t),s.positionItem(t)}),s.setWrapper(),e.addEventListener("transitionend",u.transition),t.addEventListener("mousemove",function(e){let n=e.clientY,o=e.clientX,i=t.getBoundingClientRect();n-15<=i.top?u.eventKey="scrollTop":o-15<=i.left?u.eventKey="scrollLeft":i.right-15<=o?u.eventKey="scrollRight":i.bottom-15<=n&&(u.eventKey="scrollBottom")}),t.addEventListener("mouseout",function(t){-1<t.relatedTarget.classList.value.indexOf("cloud")||(u.eventKey="position")}),t.addEventListener("wheel",function(t){t.preventDefault?t.preventDefault():t.returnValue=!1,(t.deltaY||t.detail||t.wheelDelta)>0?u.eventKey="zoomMin":u.eventKey="zoomMax"})}()}function comments(t){function e(){let e=t.elements,n=function(t,e){let n=t.value=t.value.trim();n.length<=0?(t.value="",t.style.border="1px solid orangered",t.placeholder="заполните поле"):e(n)};void 0!==e.name&&n(e.name,t=>{this.name=t,0}),void 0!==e.email&&n(e.email,t=>{this.email=t,0}),n(e.comment,t=>{this.comment=t,0}),this.token=token}t.addEventListener("submit",function(n){n.preventDefault();let o=new e;{let e=getXmlHttpRequest();e.onreadystatechange=function(){if(4==e.readyState)if(200!=e.status);else if(console.log(e.response),1==e.response)!function(e){let n=document.getElementById("comments"),o=t.elements,i=document.createElement("div");i.classList.add("comment"),i.innerHTML=`\n                <div class="comment-title">${e.name}</div>\n                <div class="comment-text">${e.comment}</div>\n        `,n.appendChild(i),void 0!==o.name&&(o.name.value=""),void 0!==o.email&&(o.email.value=""),o.comment.value=""}(o);else try{let n=JSON.parse(e.response);for(let e in n)""!==n[e]?(t.elements[e].value="",t.elements[e].style.border="1px solid orangered",t.elements[e].placeholder=n[e]):t.elements[e].style.border=""}catch(t){return!1}},e.open("GET",ajax_url+"data="+JSON.stringify(o),!0),e.send()}})}function pagination(t){function e(e){let n=+t.value,o=+document.querySelector(".pagination .last").innerText;isNaN(n)||isNaN(o)||n>0&&n<=o&&(window.location.href=window.origin+"/posts/"+n)}t.addEventListener("change",e),t.addEventListener("keyup",function(t){13===t.keyCode&&e()})}String.prototype.capitalize=function(){return this.charAt(0).toUpperCase()+this.slice(1)},Route(document.forms["header-search"],function(t){let e=t.elements;t.addEventListener("submit",function(t){0==e.search.value.trim().length&&t.preventDefault()})}),Route(document.getElementsByClassName("cloud-lists")[0],function(t){Сloud(t)}),Route(document.forms.comments,function(t){comments(t)}),Route(document.querySelector(".pagination .page"),function(t){pagination(t)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
